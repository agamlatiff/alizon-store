generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  seller
  customer
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(255)
  email         String?   @unique
  password      String?   @db.VarChar(255)
  emailVerified DateTime?
  image         String?

  role RoleUser @default(customer)

  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum BrandStatus {
  active
  inactive
}

model Brand {
  id          String      @id @default(cuid())
  name        String      @db.VarChar(255)
  image        String      @db.VarChar(255)
  products    Product[]
  description String      @db.Text
  website     String      @db.VarChar(255)
  country     String     @db.VarChar(100)
  status      BrandStatus @default(active)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum StatusCategory {
  active
  inactive
}

model Category {
  id          String         @id @default(cuid())
  name        String         @db.VarChar(255)
  description String         @db.Text
  status      StatusCategory @default(active)
  products    Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Location {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(255)
  address  String    @db.VarChar(255)
  city     String    @db.VarChar(100)
  country  String    @db.VarChar(100)
  products Product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum ProductStock {
  ready
  preorder
}

model Product {
  id          String   @id @default(cuid())
  brand_id    String
  brand       Brand    @relation(fields: [brand_id], references: [id])
  category_id String
  category    Category @relation(fields: [category_id], references: [id])
  location_id String
  location    Location @relation(fields: [location_id], references: [id])

  name        String         @db.VarChar(255)
  description String         @db.Text
  price       BigInt         @db.BigInt
  stock       ProductStock
  images      String[]
  orders      OrderProduct[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum StatusOrder {
  success
  pending
  failed
}

model Order {
  id       String         @id @default(cuid())
  code     String         @unique @db.Text
  user_id  String
  user     User           @relation(fields: [user_id], references: [id])
  total    BigInt         @db.BigInt
  status   StatusOrder
  detail   OrderDetail?
  products OrderProduct[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrderDetail {
  id String @id @default(cuid())

  order_id String @unique
  order    Order  @relation(fields: [order_id], references: [id])

  name        String  @db.VarChar(255)
  phone       String  @db.VarChar(255)
  address     String  @db.VarChar(255)
  city        String  @db.VarChar(255)
  postal_code String  @db.VarChar(255)
  notes       String? @db.VarChar(255)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OrderProduct {
  id String @id @default(cuid())

  product_id String
  product    Product @relation(fields: [product_id], references: [id])
  order_id   String
  order      Order   @relation(fields: [order_id], references: [id])

  subtotal BigInt @db.BigInt
  quantity Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
